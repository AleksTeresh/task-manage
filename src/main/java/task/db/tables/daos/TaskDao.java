/*
 * This file is generated by jOOQ.
*/
package task.db.tables.daos;


import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import task.db.enums.TaskStatus;
import task.db.tables.Task;
import task.db.tables.records.TaskRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskDao extends DAOImpl<TaskRecord, task.db.tables.pojos.Task, Long> {

    /**
     * Create a new TaskDao without any configuration
     */
    public TaskDao() {
        super(Task.TASK, task.db.tables.pojos.Task.class);
    }

    /**
     * Create a new TaskDao with an attached configuration
     */
    public TaskDao(Configuration configuration) {
        super(Task.TASK, task.db.tables.pojos.Task.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected Long getId(task.db.tables.pojos.Task object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchById(Long... values) {
        return fetch(Task.TASK.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public task.db.tables.pojos.Task fetchOneById(Long value) {
        return fetchOne(Task.TASK.ID, value);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchByName(String... values) {
        return fetch(Task.TASK.NAME, values);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchByDescription(String... values) {
        return fetch(Task.TASK.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchByStatus(TaskStatus... values) {
        return fetch(Task.TASK.STATUS, values);
    }

    /**
     * Fetch records that have <code>urgent IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchByUrgent(Boolean... values) {
        return fetch(Task.TASK.URGENT, values);
    }

    /**
     * Fetch records that have <code>appeal IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchByAppeal(Boolean... values) {
        return fetch(Task.TASK.APPEAL, values);
    }

    /**
     * Fetch records that have <code>template IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchByTemplate(Boolean... values) {
        return fetch(Task.TASK.TEMPLATE, values);
    }

    /**
     * Fetch records that have <code>section_id IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchBySectionId(Long... values) {
        return fetch(Task.TASK.SECTION_ID, values);
    }

    /**
     * Fetch records that have <code>creation_time IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchByCreationTime(Timestamp... values) {
        return fetch(Task.TASK.CREATION_TIME, values);
    }

    /**
     * Fetch records that have <code>duetime IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchByDuetime(Timestamp... values) {
        return fetch(Task.TASK.DUETIME, values);
    }

    /**
     * Fetch records that have <code>creator_username IN (values)</code>
     */
    public List<task.db.tables.pojos.Task> fetchByCreatorUsername(String... values) {
        return fetch(Task.TASK.CREATOR_USERNAME, values);
    }
}
