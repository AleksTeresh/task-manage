/*
 * This file is generated by jOOQ.
*/
package task.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;

import task.db.Keys;
import task.db.Public;
import task.db.tables.records.TaskEmployeeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TaskEmployee extends TableImpl<TaskEmployeeRecord> {

    private static final long serialVersionUID = 1084714516;

    /**
     * The reference instance of <code>public.task_employee</code>
     */
    public static final TaskEmployee TASK_EMPLOYEE = new TaskEmployee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskEmployeeRecord> getRecordType() {
        return TaskEmployeeRecord.class;
    }

    /**
     * The column <code>public.task_employee.task_id</code>.
     */
    public final TableField<TaskEmployeeRecord, Long> TASK_ID = createField("task_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.task_employee.username</code>.
     */
    public final TableField<TaskEmployeeRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(80).nullable(false), this, "");

    /**
     * Create a <code>public.task_employee</code> table reference
     */
    public TaskEmployee() {
        this("task_employee", null);
    }

    /**
     * Create an aliased <code>public.task_employee</code> table reference
     */
    public TaskEmployee(String alias) {
        this(alias, TASK_EMPLOYEE);
    }

    private TaskEmployee(String alias, Table<TaskEmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TaskEmployee(String alias, Table<TaskEmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TaskEmployeeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TaskEmployeeRecord, ?>>asList(Keys.TASK_EMPLOYEE__TASK_EMPLOYEE_TASK_FKEY, Keys.TASK_EMPLOYEE__TASK_EMPLOYEE_EMPLOYEE_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TaskEmployee as(String alias) {
        return new TaskEmployee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TaskEmployee rename(String name) {
        return new TaskEmployee(name, null);
    }
}
