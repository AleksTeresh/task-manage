/*
 * This file is generated by jOOQ.
*/
package task.db.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import task.db.Keys;
import task.db.Public;
import task.db.enums.TaskStatus;
import task.db.tables.records.TaskRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Task extends TableImpl<TaskRecord> {

    private static final long serialVersionUID = 1758426195;

    /**
     * The reference instance of <code>public.task</code>
     */
    public static final Task TASK = new Task();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TaskRecord> getRecordType() {
        return TaskRecord.class;
    }

    /**
     * The column <code>public.task.id</code>.
     */
    public final TableField<TaskRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.task.name</code>.
     */
    public final TableField<TaskRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(80).nullable(false), this, "");

    /**
     * The column <code>public.task.description</code>.
     */
    public final TableField<TaskRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(600), this, "");

    /**
     * The column <code>public.task.status</code>.
     */
    public final TableField<TaskRecord, TaskStatus> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(task.db.enums.TaskStatus.class), this, "");

    /**
     * The column <code>public.task.urgent</code>.
     */
    public final TableField<TaskRecord, Boolean> URGENT = createField("urgent", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.task.appeal</code>.
     */
    public final TableField<TaskRecord, Boolean> APPEAL = createField("appeal", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.task.template</code>.
     */
    public final TableField<TaskRecord, Boolean> TEMPLATE = createField("template", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.task.section_id</code>.
     */
    public final TableField<TaskRecord, Long> SECTION_ID = createField("section_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.task.creation_time</code>.
     */
    public final TableField<TaskRecord, Timestamp> CREATION_TIME = createField("creation_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.task.duetime</code>.
     */
    public final TableField<TaskRecord, Timestamp> DUETIME = createField("duetime", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>public.task.creator_username</code>.
     */
    public final TableField<TaskRecord, String> CREATOR_USERNAME = createField("creator_username", org.jooq.impl.SQLDataType.VARCHAR.length(80), this, "");

    /**
     * Create a <code>public.task</code> table reference
     */
    public Task() {
        this("task", null);
    }

    /**
     * Create an aliased <code>public.task</code> table reference
     */
    public Task(String alias) {
        this(alias, TASK);
    }

    private Task(String alias, Table<TaskRecord> aliased) {
        this(alias, aliased, null);
    }

    private Task(String alias, Table<TaskRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TaskRecord> getPrimaryKey() {
        return Keys.TASK_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TaskRecord>> getKeys() {
        return Arrays.<UniqueKey<TaskRecord>>asList(Keys.TASK_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TaskRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TaskRecord, ?>>asList(Keys.TASK__TASK_SECTION_FKEY, Keys.TASK__TASK_USER_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Task as(String alias) {
        return new Task(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Task rename(String name) {
        return new Task(name, null);
    }
}
